--Sequences for primary key for all tables--

CREATE SEQUENCE RECYCLED_ITEM_ID_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE RETURNED_HISTORY_ID_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE RECYCLE_ORDER_ID_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE RECYCLE_TRANSACTION_ID_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;

--Procedure to insert data into RECYCLED_ITEM Table--

CREATE OR REPLACE PROCEDURE INSERT_RECYCLED_ITEM(
    RITEM_CONDITION IN NUMBER,
    RITEM_QC_DATE IN DATE,
    RITEM_QTY IN NUMBER,
    RORD_ID IN CHAR,
    PROD_ID IN CHAR
)
AS
    V_RITEM_ID CHAR(6);
BEGIN
    SELECT 'RI' || LPAD(RECYCLED_ITEM_ID_SEQ.NEXTVAL, 4, '0') INTO V_RITEM_ID FROM DUAL;
    INSERT INTO RECYCLED_ITEM(RITEM_ID, RITEM_CONDITION, RITEM_QC_DATE, RITEM_QTY, RORD_ID, PROD_ID)
    VALUES(V_RITEM_ID, RITEM_CONDITION, RITEM_QC_DATE, RITEM_QTY, RORD_ID, PROD_ID);
END;

EXEC INSERT_RECYCLED_ITEM(1, TO_DATE('2025-01-16','YYYY-MM-DD'), 100, 'RO0001', 'P00001');
EXEC INSERT_RECYCLED_ITEM(1, TO_DATE('2025-01-18','YYYY-MM-DD'), 50, 'RO0002', 'P00002');
EXEC INSERT_RECYCLED_ITEM(1, TO_DATE('2025-01-20','YYYY-MM-DD'), 200, 'RO0003', 'P00003');
EXEC INSERT_RECYCLED_ITEM(0, TO_DATE('2025-01-22','YYYY-MM-DD'), 150, 'RO0004', 'P00004');
EXEC INSERT_RECYCLED_ITEM(1, TO_DATE('2025-01-24','YYYY-MM-DD'), 80, 'RO0005', 'P00005');

--Procedure to insert data into RETURNED_HISTORY Table--

CREATE OR REPLACE PROCEDURE INSERT_RETURNED_HISTORY(
    RETURNED_DATE IN DATE,
    RHIS_STAT IN CHAR,
    EMP_ID IN CHAR,
    RITEM_ID IN CHAR
)
AS
    V_RHS_ID CHAR(6);
BEGIN
    SELECT 'RH' || LPAD(RETURNED_HISTORY_ID_SEQ.NEXTVAL, 4, '0') INTO V_RHS_ID FROM DUAL;
    INSERT INTO RETURNED_HISTORY(RHS_ID, RETURNED_DATE, RHIS_STAT, EMP_ID, RITEM_ID)
    VALUES(V_RHS_ID, RETURNED_DATE, RHIS_STAT, EMP_ID, RITEM_ID);
END;

EXEC INSERT_RECYCLE_HISTORY(TO_DATE('2025-01-17','YYYY-MM-DD'), 'APV', 'E0001', 'RI0001');
EXEC INSERT_RECYCLE_HISTORY(TO_DATE('2025-01-19','YYYY-MM-DD'), 'APV', 'E0001', 'RI0002');
EXEC INSERT_RECYCLE_HISTORY(TO_DATE('2025-01-21','YYYY-MM-DD'), 'APV', 'E0001', 'RI0003');
EXEC INSERT_RECYCLE_HISTORY(TO_DATE('2025-01-23','YYYY-MM-DD'), 'DCL', 'E0001', 'RI0004');
EXEC INSERT_RECYCLE_HISTORY(TO_DATE('2025-01-25','YYYY-MM-DD'), 'APV', 'E0005', 'RI0005');

--Procedure to insert data into RECYCLE_ORDER Table--

CREATE OR REPLACE PROCEDURE INSERT_RECYCLE_ORDER(
    RORD_DEALING_DATE IN DATE,
    RORD_DELIVERY_DATE IN DATE,
    RORD_STAT IN CHAR,
    COM_ID IN CHAR
)
AS
    V_RORD_ID CHAR(6);
BEGIN
    SELECT 'RO' || LPAD(RECYCLE_ORDER_ID_SEQ.NEXTVAL, 4, '0') INTO V_RORD_ID FROM DUAL;
    INSERT INTO RECYCLE_ORDER(RORD_ID, RORD_DEALING_DATE, RORD_DELIVERY_DATE, RORD_STAT, COM_ID)
    VALUES(V_RORD_ID, RORD_DEALING_DATE, RORD_DELIVERY_DATE, RORD_STAT, COM_ID);
END;

EXEC INSERT_RECYCLE_ORDER(TO_DATE('2025-01-15', 'YYYY-MM-DD'), TO_DATE('2025-01-20','YYYY-MM-DD'), 'IPR', 'C0001');
EXEC INSERT_RECYCLE_ORDER(TO_DATE('2025-01-18', 'YYYY-MM-DD'), TO_DATE('2025-01-22','YYYY-MM-DD'), 'PEN', 'C0002');
EXEC INSERT_RECYCLE_ORDER(TO_DATE('2025-01-20', 'YYYY-MM-DD'), TO_DATE('2025-01-25','YYYY-MM-DD'), 'CMP', 'C0003');
EXEC INSERT_RECYCLE_ORDER(TO_DATE('2025-01-22', 'YYYY-MM-DD'), TO_DATE('2025-01-28','YYYY-MM-DD'), 'PEN', 'C0004');
EXEC INSERT_RECYCLE_ORDER(TO_DATE('2025-01-25', 'YYYY-MM-DD'), TO_DATE('2025-01-30','YYYY-MM-DD'), 'IPR', 'C0005');

--Procedure to insert data into RECYCLE_TRANSACTION Table--

CREATE OR REPLACE PROCEDURE INSERT_RECYCLE_TRANSACTION(
    RTRANS_AMOUNT IN NUMBER,
    RTRANS_PAY_METHOD IN VARCHAR2,
    RTRANS_DATE IN DATE,
    RORD_ID IN CHAR
)
AS
    V_RTRANS_ID CHAR(6);
BEGIN
    SELECT 'RT' || LPAD(RECYCLE_TRANSACTION_ID_SEQ.NEXTVAL, 4, '0') INTO V_RTRANS_ID FROM DUAL;
    INSERT INTO RECYCLE_TRANSACTION(RTRANS_ID, RTRANS_AMOUNT, RTRANS_PAY_METHOD, RTRANS_DATE, RORD_ID)
    VALUES(V_RTRANS_ID, RTRANS_AMOUNT, RTRANS_PAY_METHOD, RTRANS_DATE, RORD_ID);
END;

EXEC INSERT_RECYCLE_TRANSACTION(500, 'TNG', TO_DATE('2025-01-16','YYYY-MM-DD'), 'RO0001');
EXEC INSERT_RECYCLE_TRANSACTION(300, 'DEB', TO_DATE('2025-01-18','YYYY-MM-DD'), 'RO0002');
EXEC INSERT_RECYCLE_TRANSACTION(1000, 'DEB', TO_DATE('2025-01-20','YYYY-MM-DD'), 'RO0003');
EXEC INSERT_RECYCLE_TRANSACTION(700, 'CRED', TO_DATE('2025-01-22','YYYY-MM-DD'), 'RO0004');
EXEC INSERT_RECYCLE_TRANSACTION(400, 'CASH', TO_DATE('2025-01-24','YYYY-MM-DD'), 'RO0005');

--Trigger to validate RECYCLE_ORDER status--
/*CREATE OR REPLACE TRIGGER VALIDATE_RECYCLE_ORDER_STATUS
BEFORE INSERT OR UPDATE ON RECYCLE_ORDER
FOR EACH ROW
BEGIN 
    IF :NEW.RORD_STAT NOT IN('PEN','IPR','CMP') THEN
        RAISE_APPLICATION_ERROR(-20002, 'Invalid Order Status: Must be either PEN, IPR or CMP');
    END IF;
END;

--Trigger to automatically update RETURNED_HISTORY--
CREATE OR REPLACE TRIGGER UPDATE_HISTORY_ON_ORDER_COMPLETE
AFTER UPDATE OF RORD_STAT ON RECYCLE_ORDER
FOR EACH ROW
WHEN (NEW.RORD_STAT = 'CMP') --Only insert into RETURNED_HISTORY when order status is complete
BEGIN
    FOR ITEM IN (
        SELECT RITEM_ID
        FROM RECYCLED_ITEM
        WHERE RORD_ID = :NEW.RORD_ID
    )
    LOOP
        INSERT INTO RETURNED_HISTORY (
            RHS_ID,
            RETURNED_DATE,
            RHIS_STAT,
            EMP_ID,
            RITEM_ID
        )
        VALUES (
            'RH' || LPAD(RETURNED_HISTORY_ID_SEQ.NEXTVAL, 4, '0'), 
            :NEW.RORD_DELIVERY_DATE,      --Use delivery date as returned date                                          
            'CMP',                                                           
            (SELECT EMP_ID                                         
             FROM EMPLOYEE
             WHERE EMPLOYEE.WHS_ID IN (
                 SELECT WHS_ID
                 FROM RECYCLED_ITEM
                 WHERE RITEM_ID = ITEM.RITEM_ID
             ) AND ROWNUM = 1),
            ITEM.RITEM_ID                                         
        );
    END LOOP;
END;*/

--Get total quantity of RECYCLED_ITEM by product--
CREATE OR REPLACE FUNCTION GET_TOTAL_RECYCLED_ITEM_QTY(PROD_ID IN CHAR)
RETURN NUMBER
AS 
    TOTAL_QTY NUMBER;
BEGIN
    SELECT SUM(RITEM_QTY) INTO TOTAL_QTY
    FROM RECYCLED_ITEM
    WHERE PROD_ID = PROD_ID;
    RETURN NVL(TOTAL_QTY, 0);
END;

--execution to get total qty--
SELECT GET_TOTAL_RECYCLED_QTY_BY_PRODUCT('P0001') FROM DUAL;

--Get total transaction amount by order--
CREATE OR REPLACE FUNCTION GET_TOTAL_TRANSACTION_BY_ORDER(RORD_ID IN CHAR)
RETURN NUMBER
AS
    TOTAL_TRANSACTION NUMBER;
BEGIN
    SELECT SUM(RTRANS_AMOUNT)
    INTO TOTAL_TRANSACTION
    FROM RECYCLE_TRANSACTION
    WHERE RORD_ID = RORD_ID;

    RETURN NVL(TOTAL_TRANSACTION, 0);
END;






